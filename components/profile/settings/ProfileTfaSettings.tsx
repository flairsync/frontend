import React, { useEffect, useRef, useState } from "react"
import { AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion"
import { Button } from "@/components/ui/button"
import { CardDescription } from "@/components/ui/card"
import { Label } from "@/components/ui/label"
import { Switch } from "@/components/ui/switch"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { useTfaSettings } from "@/features/profileSettings/useTfaSettings"
import { QRCodeSVG } from 'qrcode.react';
import TfaCodeModal from "@/components/inputs/TfaCodeModal"
import { DisableTfaNotice } from "./DisableTfaNotice"
import { InfoAlert } from "@/components/shared/InfoAlert"
import { Alert } from "@/components/ui/alert"
const ProfileTfaSettings = () => {
    const { userTfaStatus, initializeTfaSetupApiCall, validateTfaCode, validatedTfaCode, disableTfaCode, disablingTfaCode, disabledTfa, recoverWords } = useTfaSettings()
    const [open, setOpen] = useState(false)
    const [verificationCode, setVerificationCode] = useState("")
    const [qrCodeLink, setQrcodeLink] = useState('');
    const [updatingTfaStatus, setUpdatingTfaStatus] = useState(0); // 0 = noth, 1= enabling , 2=disabling
    const [recoveryCodes, setRecoveryCodes] = useState("");
    const viewedRecoverCodes = useRef(false);
    useEffect(() => {
        if (validatedTfaCode) {
            setOpen(false);
        }
        if (disabledTfa) {
            setUpdatingTfaStatus(0);
        }
        if (recoverWords && recoverWords.length > 0 && !viewedRecoverCodes.current) {
            setRecoveryCodes(recoverWords);
            viewedRecoverCodes.current = true;
        }
    }, [validatedTfaCode, disabledTfa, recoverWords]);

    const generateQrCodeUrl = () => {
        if (!qrCodeLink || qrCodeLink.length == 0)
            initializeTfaSetupApiCall().then(res => {
                if (res.data.success) {
                    setQrcodeLink(res.data.data.link);
                }
            })
    }
    const handleVerify = () => {
        console.log("Verifying code:", verificationCode)
        validateTfaCode(verificationCode)
    }




    return (
        <>
            <InfoAlert
                onOpenChange={() => {
                    setRecoveryCodes("")
                }}
                open={recoveryCodes.length > 0}
                title="Recovery codes"
                description="Please memorize these codes, and store them safely they can be used to recover two factor auth"
            >
                <Alert
                    variant={"default"}
                >

                    {recoveryCodes}
                </Alert>
            </InfoAlert>
            <TfaCodeModal
                onConfirm={(code) => {
                    if (updatingTfaStatus == 2) {
                        disableTfaCode(code);
                    }
                }}
                loading={disablingTfaCode}
                onOpenChange={() => {
                    setUpdatingTfaStatus(0);
                }}
                open={updatingTfaStatus > 0}

            />
            <AccordionItem value="twofa" className="border rounded-lg px-3">
                <AccordionTrigger>Two-Factor Authentication (2FA)</AccordionTrigger>

                <AccordionContent className="space-y-4 py-2">
                    <CardDescription>
                        Two-Factor Authentication (2FA) adds an extra layer of security to your account. After entering your password,
                        youâ€™ll be asked for a one-time code generated by an authenticator app (like Google Authenticator). This ensures
                        that only you can access your account, even if someone else knows your password.
                    </CardDescription>
                    {userTfaStatus?.tfaSetup ? (
                        <div className="flex items-center justify-between">
                            <DisableTfaNotice
                                onDisable={() => {
                                    setUpdatingTfaStatus(2);
                                }}

                            />
                            {/* <Label>Enable 2FA</Label> */}
                            {/* <Switch checked={userTfaStatus?.tfaEnabled} onCheckedChange={(checked) => {
                                if (checked) {
                                    setUpdatingTfaStatus(1);
                                    //enable
                                } else {
                                    setUpdatingTfaStatus(2);
                                    //disable
                                }
                            }} /> */}
                        </div>
                    ) : (
                        <div className="flex items-center justify-between">
                            <Button onClick={() => {
                                generateQrCodeUrl();
                                setOpen(true)
                            }}>Setup Two-Factor Auth</Button>
                        </div>
                    )}
                </AccordionContent>
            </AccordionItem>

            {/* 2FA Setup Modal */}
            <Dialog open={open} onOpenChange={setOpen}>
                <DialogContent className="sm:max-w-md">
                    <DialogHeader>
                        <DialogTitle>Enable Two-Factor Authentication</DialogTitle>
                        <DialogDescription>
                            Scan the QR code below with your authenticator app (Google Authenticator, Authy, etc.), then enter the
                            6-digit code it gives you to verify setup.
                        </DialogDescription>
                    </DialogHeader>

                    {/* QR Code Placeholder */}
                    <div className="flex justify-center py-4">
                        <div className="p-4 bg-muted rounded-lg">
                            <QRCodeSVG value={qrCodeLink} />
                        </div>
                    </div>

                    {/* Input field for code */}
                    <div className="space-y-2">
                        <Label htmlFor="tfa-code">Enter 6-digit code</Label>
                        <Input
                            id="tfa-code"
                            type="text"
                            placeholder="123456"
                            maxLength={6}
                            value={verificationCode}
                            onChange={(e) => setVerificationCode(e.target.value)}
                            className="text-center tracking-widest text-lg"
                        />
                    </div>

                    <DialogFooter className="pt-4">
                        <Button variant="secondary" onClick={() => setOpen(false)}>
                            Cancel
                        </Button>
                        <Button onClick={handleVerify} disabled={verificationCode.length !== 6}>
                            Verify
                        </Button>
                    </DialogFooter>
                </DialogContent>
            </Dialog>
        </>
    )
}

export default ProfileTfaSettings
